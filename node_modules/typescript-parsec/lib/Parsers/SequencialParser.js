"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.seq = void 0;
var ParserInterface_1 = require("./ParserInterface");
// CodegenOverloadings:End
function seq() {
    var ps = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        ps[_i] = arguments[_i];
    }
    return {
        parse: function (token) {
            var error;
            var result = [{ firstToken: token, nextToken: token, result: [] }];
            for (var _i = 0, ps_1 = ps; _i < ps_1.length; _i++) {
                var p = ps_1[_i];
                if (result.length === 0) {
                    break;
                }
                var steps = result;
                result = [];
                for (var _a = 0, steps_1 = steps; _a < steps_1.length; _a++) {
                    var step = steps_1[_a];
                    var output = p.parse(step.nextToken);
                    error = ParserInterface_1.betterError(error, output.error);
                    if (output.successful) {
                        for (var _b = 0, _c = output.candidates; _b < _c.length; _b++) {
                            var candidate = _c[_b];
                            result.push({
                                firstToken: step.firstToken,
                                nextToken: candidate.nextToken,
                                result: step.result.concat([candidate.result])
                            });
                        }
                    }
                }
            }
            return ParserInterface_1.resultOrError(result, error, result.length !== 0);
        }
    };
}
exports.seq = seq;
//# sourceMappingURL=SequencialParser.js.map